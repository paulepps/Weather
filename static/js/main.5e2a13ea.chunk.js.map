{"version":3,"sources":["components/SearchBox/SearchBox.js","components/UnitComponent/UnitComponent.js","components/Navbar/Navbar.js","utils/utils.js","components/TodayComponent/TodayComponent.js","components/ListComponent/ListComponent.js","components/GraphComponent/GraphComponent.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchSubmit","useState","query","setQuery","handleSearch","e","preventDefault","console","log","className","onSubmit","type","value","name","id","placeholder","onChange","target","onClick","UnitComponent","unit","onUnitChange","changeUnit","newUnit","textContent","Navbar","props","data","city","blue","yellow","gray","getIconClassName","weatherId","hasWeatherId","idArray","indexOf","TodayComponent","day","date","description","mainTemperature","minTemperature","maxTemperature","pressure","humidity","windSpeed","iconClass","windSpeedUnit","SingleListItem","ListComponent","items","map","singleDayData","key","GraphComponent","color","style","fill","App","setUnit","queryString","setQueryString","latLng","setLatLng","navbarData","setNavbarData","todayComponentData","setTodayComponentData","listComponentData","setListComponentData","graphComponentData","setGraphComponentData","useEffect","geolocation","navigator","getCurrentPosition","position","coords","latitude","longitude","hasLatLng","length","fetchWeatherForecast","then","forecastData","extractDataForNavbar","extractDataForTodayComponent","extractDataForListAndGraphComponent","catch","error","a","queryParams","unitType","url","process","axios","get","result","country","todayForecast","list","time","Date","dt","getDay","getMonth","getDate","getFullYear","weather","hours","getHours","temp","night","Math","round","min","max","speed","forEach","forecast","item","push","shift","shouldRenderApp","instructionLayout","mainAppLayout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e2a13ea.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './SearchBox.css';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst SearchBox = ({ searchSubmit }) => {\r\n\r\n    const [query, setQuery] = useState('');\r\n\r\n\r\n    const handleQueryStringChange = (e) => {\r\n        setQuery(e.target.value);\r\n    }\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        console.log('Fetch weather data for:', query);\r\n        searchSubmit(query);\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={handleSearch}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={query}\r\n                    name=\"searchBox\"\r\n                    id=\"searchBox\"\r\n                    placeholder=\"Enter City or Zipcode\"\r\n                    onChange={handleQueryStringChange} />\r\n                <span\r\n                    className=\"search-button fa fa-search\"\r\n                    onClick={handleSearch}></span>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nSearchBox.propTypes = {\r\n    searchSubmit: PropTypes.func\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './UnitComponent.css';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst UnitComponent = ({ unit, onUnitChange }) => {\r\n\r\n    const changeUnit = (e) => {\r\n        const newUnit = e.target.textContent;\r\n        onUnitChange(newUnit);\r\n    }\r\n\r\n    return (\r\n        <div className=\"unit-container\">\r\n            <span className={`unit-value ${unit === 'C' ? 'active-unit' : ''}`} onClick={changeUnit}>C</span>\r\n            <span className={`unit-value ${unit === 'F' ? 'active-unit' : ''}`} onClick={changeUnit}>F</span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nUnitComponent.propTypes = {\r\n    unit: PropTypes.string,\r\n    onUnitChange: PropTypes.func\r\n}\r\n\r\nexport default UnitComponent;","import React from 'react';\r\nimport './Navbar.css';\r\nimport SearchBox from '../SearchBox/SearchBox';\r\nimport UnitComponent from '../UnitComponent/UnitComponent';\r\n\r\nconst Navbar = (props) => {\r\n\r\n    const sendNewUnitToParent = (newUnit) => {\r\n        props.changeUnit(newUnit);\r\n    }\r\n\r\n    const sendQueryStringToParent = (query) => {\r\n        props.searchSubmit(query);\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"navbar-container\">\r\n                <li className=\"navbar-list-item\">\r\n                    <SearchBox searchSubmit={sendQueryStringToParent} />\r\n                </li>\r\n                <li className=\"navbar-list-item city-name\">\r\n                    <span>{props.data.city}</span>\r\n                </li>\r\n                <li className=\"navbar-list-item\">\r\n                    <UnitComponent unit={props.unit} onUnitChange={sendNewUnitToParent} />\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\nexport default Navbar;","const blue = [300, 301, 302, 310, 311, 313, 314, 321, 500, 501, 502, 503, 504, 511, 520, 521, 522, 531, 611, 612, 615, 616, 620, 701]\r\nconst yellow = [210, 211, 212, 221, 731, 761, 762, 800]\r\nconst gray = [200, 201, 202, 230, 231, 232, 600, 601, 602, 621, 622, 711, 721, 741, 771, 781, 801, 802, 803, 804]\r\n\r\nconst CLASS_BLUE = 'wi-blue';\r\nconst CLASS_YELLOW = 'wi-yellow';\r\nconst CLASS_GRAY = 'wi-gray'\r\n\r\nexport const getIconClassName = (weatherId) => {\r\n    const hasWeatherId = (idArray, id) => (idArray.indexOf(id) > -1);\r\n    if (hasWeatherId(blue, weatherId)) return CLASS_BLUE;\r\n    else if (hasWeatherId(yellow, weatherId)) return CLASS_YELLOW;\r\n    else if (hasWeatherId(gray, weatherId)) return CLASS_GRAY;\r\n    else return CLASS_BLUE;\r\n}","import React from 'react';\r\nimport './TodayComponent.css';\r\nimport { getIconClassName } from '../../utils/utils';\r\n\r\nconst TodayComponent = (props) => {\r\n\r\n    const {\r\n        day, date,\r\n        weatherId, description,\r\n        mainTemperature, minTemperature, maxTemperature,\r\n        pressure, humidity, windSpeed } = props.data;\r\n\r\n    const { unit } = props;\r\n\r\n    const iconClass = getIconClassName(weatherId);\r\n    const windSpeedUnit = (unit === 'C') ? 'm/s' : 'miles/hr';\r\n\r\n    return (\r\n        <div className=\"today-component-container\">\r\n            <div className=\"date-container\">\r\n                <div>{day}</div>\r\n                <div>{date}</div>\r\n            </div>\r\n\r\n            <div className=\"icon-desc-container\">\r\n                <div className=\"icon-conatainer\">\r\n                    <i className={`wi wi-owm-${weatherId} weather-icon ${iconClass}`} ></i>\r\n                </div>\r\n                <div className=\"weather-desc\">{description}</div>\r\n            </div>\r\n\r\n            <div className=\"temp-container\">\r\n                <div className=\"temp-text\">\r\n                    <span>{mainTemperature}</span>\r\n                    <i className=\"wi wi-degrees\"></i>\r\n                </div>\r\n                <div className=\"high-low-container\">\r\n                    <div className=\"high-low-item\">\r\n                        <span>\r\n                            <i className=\"wi wi-direction-up\" ></i>\r\n                        </span>\r\n                        <span>Max</span>\r\n                        <span>\r\n                            <span>{maxTemperature}&#x00B0;</span>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"high-low-item\">\r\n                        <span>\r\n                            <i className=\"wi wi-direction-down\" ></i>\r\n                        </span>\r\n                        <span>Min</span>\r\n                        <span>\r\n                            <span>{minTemperature}&#x00B0;</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"extra-info-container\">\r\n                <div className=\"extra-info-item\">\r\n                    <span><i className=\"wi wi-humidity\"></i></span>\r\n                    <span>Humidity</span>\r\n                    <span>{humidity}%</span>\r\n                </div>\r\n                <div className=\"extra-info-item\">\r\n                    <span><i className=\"wi wi-barometer\"></i></span>\r\n                    <span>Pressure</span>\r\n                    <span>{pressure} hPa</span>\r\n                </div>\r\n                <div className=\"extra-info-item\">\r\n                    <span><i className=\"wi wi-strong-wind\"></i></span>\r\n                    <span>Wind Speed</span>\r\n                    <span>{windSpeed} {windSpeedUnit}</span>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default TodayComponent;","import React from 'react';\r\nimport './ListComponent.css';\r\nimport { getIconClassName } from '../../utils/utils';\r\n\r\nconst SingleListItem = (props) => {\r\n    const { day, weatherId, description, mainTemperature } = props.data;\r\n    const iconClass = getIconClassName(weatherId);\r\n\r\n    return (\r\n        <div className=\"single-list-item\">\r\n            <div className=\"li-info-container\">\r\n                <div className=\"li-day\">\r\n                    {day}\r\n                </div>\r\n                <div className=\"li-temp-text\">{mainTemperature}&#x00B0;</div>\r\n                <div className=\"li-desc\">{description}</div>\r\n            </div>\r\n            <div className=\"li-weather-icon\">\r\n                <i className={`wi wi-owm-${weatherId} ${iconClass}`}></i>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ListComponent = ({ data }) => {\r\n\r\n    const items = data.map(singleDayData =>\r\n        (\r\n            <SingleListItem key={singleDayData.day} data={singleDayData} />\r\n        )\r\n    )\r\n    \r\n    return (\r\n        <div className=\"list-container\">\r\n            {items}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListComponent;","import React from 'react';\r\nimport { Sparklines, SparklinesLine, SparklinesSpots } from 'react-sparklines';\r\nimport './GraphComponent.css';\r\n\r\nconst GraphComponent = ({ data }) => {\r\n    return (\r\n        <div className=\"graph-container\">\r\n            <div className=\"graph-info\">\r\n                <span><i className=\"fa fa-arrow-left\"></i></span>\r\n                <span>Temperature variation over 7 days</span>\r\n                <span><i className=\"fa fa-arrow-right\"></i></span>\r\n            </div>\r\n            <div className=\"graph\">\r\n                <Sparklines data={data}>\r\n                    <SparklinesLine color=\"#fe1743\" />\r\n                    <SparklinesSpots style={{ fill: \"#ffffff\" }} />\r\n                </Sparklines>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GraphComponent;","import React, { useState, useEffect } from 'react';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport TodayComponent from './components/TodayComponent/TodayComponent';\r\nimport ListComponent from './components/ListComponent/ListComponent';\r\nimport GraphComponent from './components/GraphComponent/GraphComponent';\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n    const [unit, setUnit] = useState('F');\r\n    const [queryString, setQueryString] = useState('');\r\n    const [latLng, setLatLng] = useState([]);\r\n    const [navbarData, setNavbarData] = useState({});\r\n    const [todayComponentData, setTodayComponentData] = useState({});\r\n    const [listComponentData, setListComponentData] = useState([]);\r\n    const [graphComponentData, setGraphComponentData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const geolocation = navigator.geolocation;\r\n        if (geolocation) {\r\n            geolocation.getCurrentPosition((position) => {\r\n                setLatLng([position.coords.latitude, position.coords.longitude]);\r\n            }, () => {\r\n                console.log('Permission Denied');\r\n            });\r\n        } else {\r\n            console.log('GeoLocation not supported...Update the browser fella');\r\n        }\r\n    }, []);\r\n\r\n    const onUnitChange = (newUnit) => {\r\n        setUnit(newUnit);\r\n    }\r\n\r\n    const onSearchSubmit = (query) => {\r\n        setQueryString(query);\r\n        setLatLng([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const hasLatLng = latLng.length > 0;\r\n        const hasCityOrZipcode = (queryString !== '');\r\n\r\n        if (hasLatLng || hasCityOrZipcode) {\r\n            fetchWeatherForecast(hasLatLng).then(forecastData => {\r\n                console.log('Forecast Data:', forecastData);\r\n                // Extract component specific data...\r\n                const navbarData = extractDataForNavbar(forecastData);\r\n                const todayComponentData = extractDataForTodayComponent(forecastData);\r\n                const { listComponentData, graphComponentData } = extractDataForListAndGraphComponent(forecastData);\r\n\r\n                setNavbarData(navbarData);\r\n                setTodayComponentData(todayComponentData);\r\n                setListComponentData(listComponentData);\r\n                setGraphComponentData(graphComponentData);\r\n\r\n            }).catch(error => {\r\n                console.log('Error:', error);\r\n            });\r\n        }\r\n    }, [latLng.length, queryString, unit]\r\n    )\r\n\r\n    const fetchWeatherForecast = async (hasLatLng) => {\r\n        const queryParams = (hasLatLng) ? `lat=${latLng[0]}&lon=${latLng[1]}` : `q=${queryString},us`;\r\n        const unitType = (unit === 'C') ? 'metric' : 'imperial';\r\n        const url = `${process.env.REACT_APP_BASE_URL}?${queryParams}&units=${unitType}&cnt=7&appid=${process.env.REACT_APP_API_KEY}`;\r\n\r\n        const result = await axios.get(url);\r\n\r\n        return result.data;\r\n    }\r\n\r\n    const extractDataForNavbar = (forecastData) => {\r\n        return {\r\n            city: `${forecastData.city.name}, ${forecastData.city.country}`\r\n        };\r\n    }\r\n\r\n    const extractDataForTodayComponent = (forecastData) => {\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n        const todayForecast = forecastData.list[0];\r\n\r\n        const time = new Date(todayForecast.dt * 1000);\r\n        const day = getDay(time);\r\n        const date = `${monthNames[time.getMonth()]} ${time.getDate()}, ${time.getFullYear()}`\r\n\r\n        const weatherId = todayForecast.weather[0].id;\r\n        const description = todayForecast.weather[0].description;\r\n\r\n        const hours = new Date().getHours();\r\n        const isDayTime = hours > 6 && hours < 20;\r\n        let mainTemperature = (isDayTime) ? todayForecast.temp.day : todayForecast.temp.night;\r\n        mainTemperature = Math.round(mainTemperature);\r\n        const minTemperature = Math.round(todayForecast.temp.min);\r\n        const maxTemperature = Math.round(todayForecast.temp.max);\r\n\r\n        const pressure = todayForecast.pressure;\r\n        const humidity = todayForecast.humidity;\r\n        const windSpeed = todayForecast.speed;\r\n\r\n        return {\r\n            day,\r\n            date,\r\n            weatherId,\r\n            description,\r\n            mainTemperature,\r\n            minTemperature,\r\n            maxTemperature,\r\n            pressure,\r\n            humidity,\r\n            windSpeed\r\n        }\r\n    }\r\n\r\n    const extractDataForListAndGraphComponent = (forecastData) => {\r\n        const listComponentData = [];\r\n        const graphComponentData = [];\r\n\r\n        forecastData.list.forEach(forecast => {\r\n            let item = {};\r\n            item.day = getDay(forecast.dt * 1000);\r\n            item.weatherId = forecast.weather[0].id;\r\n            item.description = forecast.weather[0].description;\r\n            item.mainTemperature = Math.round(forecast.temp.day);\r\n\r\n            listComponentData.push(item);\r\n            graphComponentData.push(forecast.temp.day)\r\n        });\r\n\r\n        // Remove first element as that represents today's weather\r\n        listComponentData.shift();\r\n\r\n        return {\r\n            listComponentData,\r\n            graphComponentData\r\n        }\r\n    }\r\n\r\n    // Takes date object or unix timestamp in ms and returns day string\r\n    const getDay = (time) => {\r\n        const dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday \", \"Friday\", \"Saturday\"];\r\n        return dayNames[(new Date(time).getDay())];\r\n    }\r\n\r\n    const hasLatLng = latLng.length > 0;\r\n    const hasCityOrZipcode = (queryString !== '');\r\n    const shouldRenderApp = hasLatLng || hasCityOrZipcode;\r\n\r\n    const instructionLayout = <div className=\"app-instruction\">\r\n        <p>Allow Location Access or type city name/zip code in search area to get started.</p>\r\n    </div>\r\n\r\n    const mainAppLayout = <>\r\n        <div className=\"app-today\">\r\n            <TodayComponent data={todayComponentData} unit={unit} />\r\n        </div>\r\n        <div className=\"app-list-graph\">\r\n            <ListComponent data={listComponentData} />\r\n            <GraphComponent data={graphComponentData} />\r\n        </div>\r\n    </>\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <div className=\"app-nav\">\r\n                <Navbar\r\n                    searchSubmit={onSearchSubmit}\r\n                    changeUnit={onUnitChange}\r\n                    unit={unit}\r\n                    data={navbarData}\r\n                />\r\n            </div>\r\n            {shouldRenderApp ? mainAppLayout : instructionLayout}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}